name: FastAPI CI/CD

on:
  push:
    branches:
      - dev 
      - main 

env:
  AWS_REGION: ap-southeast-1  
  ECR_REPOSITORY: fastapi-app
  CLUSTER_NAME: my-eks-cluster
  NAMESPACE: fastapi-namespace

permissions:
  contents: read

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      
      - name: Set up Python environment
        working-directory: crud-interface
        run: |
          python -m venv venv
          . venv/bin/activate
          pip install -r requirements.txt
      
      - name: Run tests
        working-directory: crud-interface
        run: |
          export MONGODB_URI=${{ secrets.MONGODB_URI}}
          export MONGODB_USERNAME=${{ secrets.MONGODB_USERNAME}}
          export MONGODB_PASSWORD=${{ secrets.MONGODB_PASSWORD}}
          . venv/bin/activate
          PYTHONPATH=app pytest

      - name: Install truffleHog
        run: pip install truffleHog

      - name: Run secret scanning
        run: trufflehog --json --max_depth 10 .
      
  build-and-deploy:
    name: Build & Deploy FastAPI
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build Docker image
        working-directory: crud-interface
        run: |
          docker build -t fast-api:${{ github.sha }} .

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.18.3
          trivy --version

      - name: Run Trivy vulnerability scanner
        working-directory: crud-interface
        run: |
          trivy image fast-api:${{ github.sha }} --severity HIGH --exit-code 1
          trivy image fast-api:${{ github.sha }} --severity CRITICAL --exit-code 1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $(aws ecr describe-repositories --query "repositories[?repositoryName=='${{ env.ECR_REPOSITORY }}'].repositoryUri" --output text)

      - name: Build and Push Docker Image
        run: |
          ECR_URI=$(aws ecr describe-repositories --query "repositories[?repositoryName=='${{ env.ECR_REPOSITORY }}'].repositoryUri" --output text)
          IMAGE_TAG=$(git rev-parse --short HEAD)
          docker build -t $ECR_URI:$IMAGE_TAG .
          docker tag $ECR_URI:$IMAGE_TAG $ECR_URI:latest
          docker push $ECR_URI:$IMAGE_TAG
          docker push $ECR_URI:latest

      - name: Set up kubeconfig for EKS
        run: aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: create secrets for mongodb
        env: 
          MONGO_USERNAME: ${{ secrets.MONGO_USERNAME}}
          MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD}}
          MONGO_CONNECTION_STRING: ${{ secrets.MONGO_CONNECTION_STRING}}
        run: kubectl create secret generic mongodb-secrets --from-literal=username=$MONGO_USERNAME --from-literal=password=$MONGO_PASSWORD  --from-literal=mongodb-connection-string=mongodb://mongouser:mongopassword@mongodb-service:27017

      - name: Deploy to Kubernetes
        run: |
          ECR_URI=$(aws ecr describe-repositories --query "repositories[?repositoryName=='${{ env.ECR_REPOSITORY }}'].repositoryUri" --output text)
          IMAGE_TAG=$(git rev-parse --short HEAD)
          sed -i "s|<ECR_URI>|$ECR_URI|g" k8s/deployment.yaml
          sed -i "s|<IMAGE_TAG>|$IMAGE_TAG|g" k8s/deployment.yaml
          kubectl apply -f k8s/
